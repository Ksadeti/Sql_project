Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10,000
SELECT count(*) FROM attribute;

ii. Business table = 10,000
SELECT count(*) FROM business;

iii. Category table = 10,000
SELECT count(*) FROM bategory;

iv. Checkin table = 10,000
SELECT count(*) FROM checkin;

v. elite_years table = 10,000
SELECT count(*) FROM elite_years;

vi. friend table = 10,000
SELECT count(*) FROM friend;

vii. hours table = 10,000
SELECT count(*) FROM hours;

viii. photo table = 10,000
SELECT count(*) FROM photo;

ix. review table = 10,000
SELECT count(*) FROM review;

x. tip table = 10,000
SELECT count(*) FROM tip;

xi. user table = 10,000
SELECT count(*) FROM user;
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10,000
SELECT COUNT(DISTINCT business_id) AS distinct_records FROM business

ii. Hours = 1,562
SELECT COUNT(DISTINCT business_id) AS distinct_records FROM hours;

iii. Category = 2,643
SELECT COUNT(DISTINCT category_id) AS distinct_records FROM category;

iv. Attribute = 1,115
SELECT COUNT(DISTINCT business_id) AS distinct_records FROM attribute;

v. Review = 10,000
SELECT COUNT(DISTINCT review_id) AS distinct_records FROM review;

vi. Checkin = 493
SELECT COUNT(DISTINCT business_id) AS distinct_records FROM checkin;

vii. Photo = 10,000
SELECT COUNT(DISTINCT photo_id) AS distinct_records FROM photo;

viii. Tip = 537
SELECT COUNT(DISTINCT tip_id) AS distinct_records FROM tip;

ix. User = 10,000
SELECT COUNT(DISTINCT user_id) AS distinct_records FROM user;

x. Friend = 11
SELECT COUNT(DISTINCT user_id) AS distinct_records FROM friend;

xi. Elite_years = 2,780
SELECT COUNT(DISTINCT user_id) AS distinct_records FROM elite_years;


Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: NO
	
	
	SQL code used to arrive at answer:
	
   SELECT count(*) - count(id),
   count(*) - count(name),
   count(*) - count(review_count),
   count(*) - count(yelping_since),
   count(*) - count(useful),
   count(*) - count(cool),
   count(*) - count(fans),
   count(*) - count(average_stars),
   count(*) - count(compliment_hot),
   count(*) - count(compliment_more),
   count(*) - count(compliment_profile),
   count(*) - count(compliment_cute),
   count(*) - count(compliment_list),
   count(*) - count(compliment_note),
   count(*) - count(compliment_plain),
   count(*) - count(compliment_cool),
   count(*) - count(compliment_funny),
   count(*) - count(compliment_writer),
   count(*) - count(compliment_photos)
FROM user
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.71
	SELECT min(stars), max(stars), avg(stars) FROM review
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.65
	SELECT min(stars), max(stars), avg(stars) FROM business
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.01
	SELECT min(likes), max(likes), avg(likes) FROM tip
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.94
	SELECT min(count), max(count), avg(count) FROM checkin
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.3
	SELECT min(review_count), max(review_count), avg(review_count) FROM user
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
SELECT city, sum(review_count) AS total_review
FROM business
GROUP BY city
ORDER BY total_review DESC
	
	Copy and Paste the Result Below:
+-----------------+--------------+
| city            | total_review |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars ,sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Avon"
GROUP BY stars

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------------+
| stars | stars_rating_count |
+-------+--------------------+
|   1.5 |                 10 |
|   2.5 |                  6 |
|   3.5 |                 88 |
|   4.0 |                 21 |
|   4.5 |                 31 |
|   5.0 |                  3 |
+-------+--------------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT stars, sum(review_count) AS stars_rating_count
FROM business
WHERE city = "Beachwood"
GROUP BY stars


Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------------+
| stars | stars_rating_count |
+-------+--------------------+
|   2.0 |                  8 |
|   2.5 |                  3 |
|   3.0 |                 11 |
|   3.5 |                  6 |
|   4.0 |                 69 |
|   4.5 |                 17 |
|   5.0 |                 23 |
+-------+--------------------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:

SELECT id, review_count
from user
GROUP BY id
ORDER BY review_count DESC
LIMIT 3	
		
	Copy and Paste the Result Below:

+------------------------+--------------+
| id                     | review_count |
+------------------------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| -3s52C4zL_DHRK0ULG6qtg |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg |         1339 |
+------------------------+--------------+		


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
Yes. There appears to be a correlation present. Users who have authored a greater number of reviews tend to attract a larger number of followers.	

SELECT id, name, review_count, fans
FROM user
GROUP BY id
ORDER BY review_count desc;

+------------------------+-----------+--------------+------+
| id                     | name      | review_count | fans |
+------------------------+-----------+--------------+------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  253 |
| -3s52C4zL_DHRK0ULG6qtg | Sara      |         1629 |   50 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri      |         1339 |   76 |
| -K2Tcgh2EKX6e6HqqIrBIQ | .Hon      |         1246 |  101 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |  126 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  311 |
| -gokwePdbXjfS0iF7NsUGA | eric      |         1116 |   16 |
| -DFCC64NXgqrxlO8aLU5rg | Roanna    |         1039 |  104 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  497 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  173 |
| -fUARDNuXAfrOn4WLSZLgA | Ed        |          904 |   38 |
| -hKniZN2OdshWLHYuj21jQ | Nicole    |          864 |   43 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  124 |
| -B-QEUESGWHPE_889WJaeg | Mark      |          861 |  115 |
| -kLVfaJytOJY2-QdQoCcNQ | Christina |          842 |   85 |
| -kO6984fXByyZm3_6z2JYg | Dominic   |          836 |   37 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  120 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  159 |
| -l9giG8TSDBG1jnUBUXp5w | Alison    |          775 |   61 |
| -dw8f7FLaUmWR7bfJ_Yf0w | Sui       |          754 |   78 |
| -AaBjWJYiQxXkCMDlXfPGw | Tim       |          702 |   35 |
| -jt1ACMiZljnBFvS6RRvnA | L         |          696 |   10 |
| -IgKkE8JvYNWeGu8ze4P8Q | Angela    |          694 |  101 |
| -hxUwfo3cMnLTv-CAaP69A | Crissy    |          676 |   25 |
| -H6cTbVxeIRYR-atxdielQ | Lyn       |          675 |   45 |
+------------------------+-----------+--------------+------+
(Output limit exceeded, 25 of 10000 total rows shown)


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Love

	
	SQL code used to arrive at answer:

SELECT SUM(CASE WHEN review.text LIKE '%love%' THEN 1 ELSE 0 END) as love_count
,SUM(CASE WHEN review.text LIKE '%hate%' THEN 1 ELSE 0 END) as hate_count
,SUM(CASE WHEN review.text LIKE '%love%hate%' OR review.text LIKE '%hate%love%' THEN 1 ELSE 0 END) as both
FROM review;

+------------+------------+------+
| love_count | hate_count | both |
+------------+------------+------+
|       1780 |        232 |   54 |
+------------+------------+------+
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

SELECT id, name, fans
FROM user
ORDER by fans DESC
LIMIT 10	
	
	Copy and Paste the Result Below:

+------------------------+-----------+------+
| id                     | name      | fans |
+------------------------+-----------+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |  120 |
+------------------------+-----------+------+

		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.

I choose "Las Vegas" and "Shopping" category.

i. Do the two groups you chose to analyze have a different distribution of hours?

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',               
       COUNT(DISTINCT business.id) AS id_count,            
       COUNT(hours) AS open_days_total,   -- number of openning days        
       COUNT(hours)*1.0 / COUNT(DISTINCT business.id)  AS open_days_avg
FROM ((business INNER JOIN hours ON business.id = hours.business_id)
     INNER JOIN category ON business.id = category.business_id)
WHERE city = 'Las Vegas' AND category.category ='Shopping'
GROUP BY STARS
Result:

+-----------+----------+-----------------+---------------+
| STARS     | id_count | open_days_total | open_days_avg |
+-----------+----------+-----------------+---------------+
| 2-3 stars |        2 |              13 |           6.5 |
| 4-5 stars |        2 |              12 |           6.0 |
+-----------+----------+-----------------+---------------+
There isn't a significant disparity in the days of operation between the two sets.


ii. Do the two groups you chose to analyze have a different number of reviews?

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',               
       COUNT(DISTINCT business.id) AS id_count,            
       SUM(review_count) AS review_count_total,
       SUM(review_count)*1.0/COUNT(DISTINCT business.id)  AS review_count_avg
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Shopping'
GROUP BY STARS

Result:

+-----------+----------+--------------------+------------------+
| STARS     | id_count | review_count_total | review_count_avg |
+-----------+----------+--------------------+------------------+
| 2-3 stars |        2 |                 17 |              8.5 |
| 4-5 stars |        2 |                 36 |             18.0 |
+-----------+----------+--------------------+------------------+
There is a contrast in the overall review count between the two categories, with 17 and 36, respectively. The group awarded 4 to 5 stars has twice as many reviews as the other group.         


iii. Are you able to infer anything from the location data provided between these two groups? Explain.

SQL code used for analysis:

SELECT CASE WHEN stars >= 4.0 THEN '4-5 stars'
            WHEN stars >= 2.0 THEN '2-3 stars'
            ELSE 'below 2' END AS 'STARS',
       business.neighborhood,
       business.address,
       business.postal_code
FROM business INNER JOIN category ON business.id = category.business_id
WHERE city = 'Las Vegas' AND category.category ='Shopping'
ORDER BY STARS
Result:

+-----------+--------------+-----------------------------+-------------+
| STARS     | neighborhood | address                     | postal_code |
+-----------+--------------+-----------------------------+-------------+
| 2-3 stars | Southeast    | 3421 E Tropicana Ave, Ste I | 89121       |
| 2-3 stars | Eastside     | 3808 E Tropicana Ave        | 89121       |
| 4-5 stars |              | 1000 Scenic Loop Dr         | 89161       |
| 4-5 stars |              | 3555 W Reno Ave, Ste F      | 89118       |
+-----------+--------------+-----------------------------+-------------+

The businesses rated with 2-3 stars are located on Tropicana Ave., whereas those with higher ratings are more dispersed and not clustered together.		



2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Open businesses have higher review counts on average compared to closed businesses.
       
         
ii. Difference 2: Open businesses tend to have higher star ratings on average compared to closed businesses.
         
         
SQL code used for analysis:

SELECT  CASE WHEN is_open = 1 THEN "OPEN"
WHEN is_open = 0 THEN "CLOSED"
END status, 
count(distinct id) AS businesses,
sum(review_count) AS total_review,
avg(review_count) AS avg_review,
avg(stars) AS avg_stars
FROM business
GROUP BY is_open
ORDER BY status DESC


+--------+------------+--------------+---------------+---------------+
| status | businesses | total_review |    avg_review |     avg_stars |
+--------+------------+--------------+---------------+---------------+
| OPEN   |       8480 |       269300 | 31.7570754717 | 3.67900943396 |
| CLOSED |       1520 |        35261 | 23.1980263158 | 3.52039473684 |
+--------+------------+--------------+---------------+---------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do: 
The analysis aims to identify the category with the highest number of businesses and determine which categories have the highest average rating based on total reviews. Additionally, it investigates whether there is a correlation between the number of reviews and the average star rating, considering whether more reviews lead to lower average stars.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I'll tally the number of businesses per category (excluding location for simplicity) and select only categories with more than 10 businesses. Additionally, I'll consider reviews exceeding 150 to avoid anomalies and examine the average star ratings.                         
                  
iii. Output of your finished dataset:
         
+------------------------+----------------+-----------+---------------+
| category               | num_businesses | avg_stars | total_reviews |
+------------------------+----------------+-----------+---------------+
| Health & Medical       |             17 |     4.088 |           203 |
| Shopping               |             30 |     3.983 |           977 |
| American (Traditional) |             11 |     3.818 |          1128 |
| Food                   |             23 |     3.783 |          1781 |
| Bars                   |             17 |       3.5 |          1322 |
| Nightlife              |             20 |     3.475 |          1351 |
| Restaurants            |             71 |     3.458 |          4504 |
+------------------------+----------------+-----------+---------------+


iv. Provide the SQL code you used to create your final dataset:

SELECT category, 
count(distinct id) AS num_businesses, 
round(avg(stars),3) AS avg_stars,
sum(review_count) total_reviews
FROM business
JOIN category ON business.id = category.business_id
GROUP BY category
HAVING num_businesses >= 10 AND total_reviews >= 150
ORDER BY avg_stars DESC
